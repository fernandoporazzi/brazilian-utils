package boleto

import (
	"testing"
	"time"
)

func TestIsValid(t *testing.T) {
	entries := []struct {
		digitableLine string
		want          bool
	}{
		{"", false},
		{"12345", false},
		{"123456789", false},
		{"00190000090114971860168524522114675860000102656", true},
		{"0019000009 01149.718601 68524.522114 6 75860000102656", true},
		{"00190000020114971860168524522114675860000102656", false},
		{"0034191.79001 01043.510047 91020.150008 7 84100026000", false},
		{"001 9 05009 ( 5 ) 401448 1606 ( 9 ) 0680935031 ( 4 ) 337370000000100", true},
		{"00190500954014481606906809350314337370000000100", true},
	}

	for _, entry := range entries {
		got := IsValid(entry.digitableLine)

		if got != entry.want {
			t.Errorf("Expected Boleto '%v' to be equal %v, but got %v", entry.digitableLine, entry.want, got)
		}
	}
}

func TestFormat(t *testing.T) {
	t.Run("When length is smaller than the limit of 47 digits", func(t *testing.T) {
		entries := []struct {
			boleto string
			want   string
		}{
			{"", ""},
			{"1", "1"},
			{"10", "10"},
			{"104", "104"},
			{"1049", "1049"},
			{"10491", "10491"},
			{"104914", "10491.4"},
			{"1049144", "10491.44"},
			{"10491443", "10491.443"},
			{"104914433", "10491.4433"},
			{"1049144338", "10491.44338"},
			{"10491443385", "10491.44338 5"},
			{"104914433855", "10491.44338 55"},
			{"1049144338551", "10491.44338 551"},
			{"10491443385511", "10491.44338 5511"},
			{"104914433855119", "10491.44338 55119"},
			{"1049144338551190", "10491.44338 55119.0"},
			{"10491443385511900", "10491.44338 55119.00"},
			{"104914433855119000", "10491.44338 55119.000"},
			{"1049144338551190000", "10491.44338 55119.0000"},
			{"10491443385511900000", "10491.44338 55119.00000"},
			{"104914433855119000002", "10491.44338 55119.000002"},
			{"1049144338551190000020", "10491.44338 55119.000002 0"},
			{"10491443385511900000200", "10491.44338 55119.000002 00"},
			{"104914433855119000002000", "10491.44338 55119.000002 000"},
			{"1049144338551190000020000", "10491.44338 55119.000002 0000"},
			{"10491443385511900000200000", "10491.44338 55119.000002 00000"},
			{"104914433855119000002000000", "10491.44338 55119.000002 00000.0"},
			{"1049144338551190000020000000", "10491.44338 55119.000002 00000.00"},
			{"10491443385511900000200000000", "10491.44338 55119.000002 00000.000"},
			{"104914433855119000002000000001", "10491.44338 55119.000002 00000.0001"},
			{"1049144338551190000020000000014", "10491.44338 55119.000002 00000.00014"},
			{"10491443385511900000200000000141", "10491.44338 55119.000002 00000.000141"},
			{"104914433855119000002000000001413", "10491.44338 55119.000002 00000.000141 3"},
			{"1049144338551190000020000000014132", "10491.44338 55119.000002 00000.000141 3 2"},
			{"10491443385511900000200000000141325", "10491.44338 55119.000002 00000.000141 3 25"},
			{"104914433855119000002000000001413252", "10491.44338 55119.000002 00000.000141 3 252"},
			{"1049144338551190000020000000014132523", "10491.44338 55119.000002 00000.000141 3 2523"},
			{"10491443385511900000200000000141325230", "10491.44338 55119.000002 00000.000141 3 25230"},
			{"104914433855119000002000000001413252300", "10491.44338 55119.000002 00000.000141 3 252300"},
			{"1049144338551190000020000000014132523000", "10491.44338 55119.000002 00000.000141 3 2523000"},
			{"10491443385511900000200000000141325230000", "10491.44338 55119.000002 00000.000141 3 25230000"},
			{"104914433855119000002000000001413252300000", "10491.44338 55119.000002 00000.000141 3 252300000"},
			{"1049144338551190000020000000014132523000009", "10491.44338 55119.000002 00000.000141 3 2523000009"},
			{"10491443385511900000200000000141325230000093", "10491.44338 55119.000002 00000.000141 3 25230000093"},
			{"104914433855119000002000000001413252300000934", "10491.44338 55119.000002 00000.000141 3 252300000934"},
			{"1049144338551190000020000000014132523000009342", "10491.44338 55119.000002 00000.000141 3 2523000009342"},
			{"10491443385511900000200000000141325230000093423", "10491.44338 55119.000002 00000.000141 3 25230000093423"},
		}

		for _, entry := range entries {
			got := Format(entry.boleto)

			if got != entry.want {
				t.Errorf("Expected formatted boleto to be '%v', but got '%v'", entry.want, got)
			}
		}
	})

	t.Run("When length is greater than the limit of 47 digits", func(t *testing.T) {
		got := Format("10491443385511900000200000000141325230000093423123123123")
		want := "10491.44338 55119.000002 00000.000141 3 25230000093423"

		if got != want {
			t.Errorf("Expected formatted boleto to be '%v', but got '%v'", want, got)
		}
	})

	t.Run("When boleto has non numeric characters", func(t *testing.T) {
		got := Format("10491.44A338 55119.000002? ABC00000.000?141 3 25230000093423")
		want := "10491.44338 55119.000002 00000.000141 3 25230000093423"

		if got != want {
			t.Errorf("Expected formatted boleto to be '%v', but got '%v'", want, got)
		}
	})
}

func TestGetValueInCents(t *testing.T) {
	entries := []struct {
		boleto string
		want   int
	}{
		{"", 0},
		{"00190000090114971860168524522114775860000102656", 0}, // invalid boleto
		{"00190000090114971860168524522114675860000102656", 102656},
		{"0019000009 01149.718601 68524.522114 6 75860000102656", 102656}, // boleto with mask
	}

	for _, entry := range entries {
		got := GetValueInCents(entry.boleto)

		if got != entry.want {
			t.Errorf("Expected Boleto '%v' to have value %v, but got %v", entry.boleto, entry.want, got)
		}
	}
}

func TestGetBankCode(t *testing.T) {
	entries := []struct {
		boleto string
		want   string
	}{
		{"", ""},
		{"00190000090114971860168524522114775860000102656", ""}, // invalid boleto
		{"00190000090114971860168524522114675860000102656", "001"},
		{"0019000009 01149.718601 68524.522114 6 75860000102656", "001"},
	}

	for _, entry := range entries {
		got := GetBankCode(entry.boleto)

		if got != entry.want {
			t.Errorf("Expected Boleto '%v' to have bank code %v, but got %v", entry.boleto, entry.want, got)
		}
	}
}

func TestGetExpirationDate(t *testing.T) {
	entries := []struct {
		boleto string
		want   time.Time
	}{
		{"", time.Time{}},
		{"00190000090114971860168524522114775860000102656", time.Time{}}, // invalid boleto
		{"00190000090114971860168524522114675860000102656", time.Date(2018, time.June, 15, 0, 0, 0, 0, time.UTC)},
		{"0019000009 01149.718601 68524.522114 6 75860000102656", time.Date(2018, time.June, 15, 0, 0, 0, 0, time.UTC)},
	}

	for _, entry := range entries {
		got := GetExpirationDate(entry.boleto)

		if got != entry.want {
			t.Errorf("Expected Boleto '%v' to have expiration date %v, but got %v", entry.boleto, entry.want, got)
		}
	}
}
